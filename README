Dependencies
============
- python-django (>= 1.2.3)
- python-lxml
- python-django-djapian
- python-mysqldb
- python-imaging
- gettext
- django-tagging (python-django-tagging on Debian/Ubuntu)
- python-markdown
- python-beautifulsoup
- python-dateutil
- python-feedparser
- python-simplejson
- python-django-south
- python-cssutils
- libnode-less

LESS (CSS extension)
====================
# apt-get install rubygems1.8
# gem install less

Define the path to the lessc binary in settings_local.py, e.g.:
LESS_PATH='/var/lib/gems/1.8/gems/less-1.2.21/bin/lessc'

mkdir
=====
static/images/parties
static/images/orgs
static/images/users
static/tmp

Commands
========
$ ./manage.py compilemessages
$ ./manage.py index --rebuild
$ utils/populate-db.py -p
$ utils/populate-db.py -m
$ utils/populate-db.py -v --full-update
$ utils/populate-db.py -M --full-update
$ utils/populate-db.py -c

SQL
===

CREATE DATABASE kamu CHARACTER SET utf8 COLLATE utf8_swedish_ci;
CREATE USER 'kamu'@'localhost' IDENTIFIED BY 'kamu';
GRANT ALL PRIVILEGES ON kamu.* TO 'kamu'@'localhost';

If your existing database is in latin1, you can convert to utf-8
like this:

ALTER DATABASE kamu DEFAULT CHARACTER SET utf8 COLLATE utf8_swedish_ci;

echo "show tables" | ./manage.py dbshell > /tmp/tables
for a in $(cat /tmp/tables) ; do
	echo $a
	ALT="alter table $a convert to character set utf8 collate utf8_swedish_ci"
	echo $ALT | ./manage.py dbshell
done

Unit testing
============

To run the integrated unit tests make sure the access rights are set up
for the test framework:

GRANT ALL PRIVILEGES ON `test_kamu`.* TO 'kamu'@'localhost';

Then just run

./manage.py test votes

or specify any of the other kamu applications instead of 'votes'.

If it's not important to run the tests on the mysql backend, you can
speed up the tests considerably by setting up fast testing mode. This
will use the sqlite3 backend keeping the DB in memory and use the faster
syncdb method instead of south migration.

Add to settings_local.py:

FAST_TEST = True

Create an sqlite3 database and bring its tables synchronized to the
django models. The test framework will clone and populate this database
during test execution:

./manage.py syncdb
./manage.py migrate votes

optionally migrate also all other kamu applications besides 'votes' that
you want to test.

Then run the tests normally as described above.

